/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// main.ts
var main_exports = {};
__export(main_exports, {
  default: () => ImageNumberPlugin
});
module.exports = __toCommonJS(main_exports);
var import_obsidian = require("obsidian");
var regexWiki = /\[\[([^\]]+)\]\]/;
var regexParenthesis = /\((.*?)\)/;
var regexWikiGlobal = /\[\[([^\]]*)\]\]/g;
var regexMdGlobal = /\[([^\]]*)\]\(([^\(]*)\)/g;
var imageNumber = {
  "1": 1,
  "2": 2,
  "3": 3,
  "4": 4,
  "5": 5,
  "6": 6,
  "7": 7,
  "8": 8,
  "9": 9,
  "10": 10,
  "11": 11,
  "12": 12,
  "13": 13,
  "14": 14,
  "15": 15,
  "16": 16,
  "17": 17,
  "18": 18,
  "19": 19,
  "20": 20
};
var addImageFromLink = (link, sourcePath, parent, plugin) => {
  let destFile = app.metadataCache.getFirstLinkpathDest(link, sourcePath);
  if (destFile) {
    const img = parent.createEl("img");
    img.src = plugin.app.vault.adapter.getResourcePath(destFile.path);
  }
};
var addExternalImage = (link, parent) => {
  const img = parent.createEl("img");
  img.src = link;
};
var addPlaceHolder = (widthXHeight, parent) => {
  widthXHeight = widthXHeight != null ? widthXHeight : "640x480";
  const img = parent.createEl("img");
  img.src = `https://via.placeholder.com/${widthXHeight}`;
};
var renderLayout = (images, slides, sourcePath, parent, plugin) => {
  const imageNumberCount = imageNumber[slides];
  if (images.length < imageNumberCount) {
    for (let i = images.length; i < imageNumberCount; i++) {
      images.push({ type: "placeholder" });
    }
  }
  if (images.length > imageNumberCount) {
    images = images.slice(0, imageNumberCount);
  }
  const img_div = parent.createEl("div", { cls: `gallery_wrapper slider-container` });
  const ul_img = img_div.createEl("ul", { cls: `inner-slider` });
  images.forEach((image, idx) => {
    const li_img = ul_img.createEl("li", { cls: `img-card` });
    if (image.type === "local") {
      addImageFromLink(image.link, sourcePath, li_img, plugin);
    } else if (image.type === "external") {
      console.log(image.link);
      addExternalImage(image.link, li_img);
    } else if (image.type === "placeholder") {
      addPlaceHolder("640x480", li_img);
    }
  });
  const buttonDiv = parent.createEl("div", { cls: "slide-controls" });
  let prevButtonEl = buttonDiv.createEl("button", { text: "Prev", cls: "prev-img-btn" });
  let nextButtonEl = buttonDiv.createEl("button", { text: "Next", cls: "next-img-btn" });
  const dot_span = img_div.createEl("div", { cls: `dots-span` });
  images.forEach((image, idx) => {
    const dot = dot_span.createEl("button", { cls: `dots` });
  });
};
var getImages = (source) => {
  const lines = source.split("\n").filter((row) => row.startsWith("!"));
  const images = lines.map((line) => getImageFromLine(line));
  return images.filter((image) => image !== null);
};
var getImageFromLine = (line) => {
  var _a, _b;
  if (line.match(regexMdGlobal)) {
    const link = (_a = line.match(regexParenthesis)) == null ? void 0 : _a[1];
    if (link) {
      return { type: "external", link };
    }
  } else if (line.match(regexWikiGlobal)) {
    const link = (_b = line.match(regexWiki)) == null ? void 0 : _b[1];
    if (link) {
      return {
        type: "local",
        link
      };
    }
  }
  return null;
};
var ImageNumberPlugin = class extends import_obsidian.Plugin {
  async onload() {
    Object.keys(imageNumber).forEach((slides) => {
      this.registerMarkdownCodeBlockProcessor(`image-slider-${slides}`, (source, el, ctx) => {
        const images = getImages(source);
        renderLayout(images, slides, ctx.sourcePath, el, this);
      });
    });
  }
};
//# sourceMappingURL=data:application/json;base64,
